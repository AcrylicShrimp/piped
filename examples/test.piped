
@import "./basics.piped" as basic;
@import "./return_a_value.piped" as return_a_value;
@import "./subpipeline.piped" as subpipeline;

subpipeline value="foo";
subpipeline value="bar";
subpipeline value="baz";
subpipeline;
subpipeline;
basic;

@print "[\"01\", \"02\", \"03\"][0]=" get(["01", "02", "03"], 0);
@print "[\"01\", \"02\", \"03\"][0]=" typeof(get(["01", "02", "03"], 0));
@print "{\"1\": 1, \"2\": 2, \"3\": 3}[\"2\"]=" get({"1": 1, "2": 2, "3": 3}, "2");
@print "{\"1\": 1, \"2\": 2, \"3\": 3}[\"2\"]=" typeof(get({"1": 1, "2": 2, "3": 3}, "2"));
@print "join_path()=" join_path("C:\\", "test", "my", "test");

@nonblock exec cmd="python" params=["assets/wait.py"];
@nonblock exec cmd="python" params=["assets/wait.py"];
@nonblock exec cmd="python" params=["assets/wait.py"];

@await all;

@nonblock exec cmd="python" params=["assets/wait.py"];
@nonblock exec cmd="python" params=["assets/wait.py"];
@nonblock exec cmd="python" params=["assets/wait.py"];

@print "nonblocks are running in background!";
@print "awating them...";

@nonblock "return_foo"
@result as foo
return_a_value;

@result as bar
return_a_value;

@print "foo exists? " is_exists("foo");
@print "bar exists? " is_exists("bar");

@await "return_foo";

@print "foo exists? " is_exists("foo");
@print "bar exists? " is_exists("bar");

@for variable in [1, 2, 3, 4, 5] {
	@print variable;
}
