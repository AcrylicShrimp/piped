
// One-line comment

// Defines variables
@set foo="value";
@set bar="value";

@print "foo: " foo;
@print [foo, bar];
@print {a:10, bbbbb: 20, "foo---bar": [foo, bar, "baz"] };

// Function calls
@print "join_path =>" join_path("a", "b", "c");

// Pre defined variables
// hostArch:        Current host cpu architecture name that one of: "x86", "x86_64", "arm".
// hostOS:          Current host os name that one of: "linux", "macos", "windows".
// workingDir:      Current working directory for this pipeline execution.

@print "hostArch: " hostArch;
@print "hostOS: " hostOS;

// Executes a OS shell command
exec
    cmd="python"
    params=[
        "--version",
//        "param2",
//        "param3",
//        "param4",
    ]
    env={
        "env1": "value",
        "env2": "value",
        "env3": "value",
    };

// Gets results of last exec and print them to the stdout and stderr
// @print "exitcode: " lastExecExitCode;
// @print "stdout: " lastExecStdOut;
// @printErr "stderr: " lastExecStdErr;

// Invokes a pipeline
// copy
//     src=[
//         "my-file001.bin",
//         "my-file002.bin",
//         "my-file003.bin",
//         "my-file004.bin",
//         [
//             "fdsaf",
//         ],
//         [
//             "fdsfafds121131",
//         ]
//     ]
//     dst="assets/bin";

// Invokes a pipeline in background with its name
// @nonblock "my-pipeline" my_pipeline param="param value";

// Waits a previous named background pipeline invokation
// @await "my-pipeline";

// @nonblock
// git_clone
//     repository="https://github.com/AcrylicShrimp/piped.git"
//     dir="piped-master"
//     branch="master";

// @nonblock
// git_clone
//     repository="https://github.com/AcrylicShrimp/piped.git"
//     dir="piped-master"
//     tag="v1.0";

@await;         // Waits for any previous unnamed background pipeline invokations
@await all;     // Waits for any previous background pipeline invokations

// Conditional flow control
@if equals(hostOS, "linux") {
    @print "hello, linux!";
} @else if equals(hostOS, "macos") {
    @print "hello, macos!";
} @else if equals(hostOS, "windows") {
    @print "hello, windows!";
} @else {
    @print "hello, others!";
}
